
#print('fa.cross_init starting')


fa.AbstractFunctionalArchitecture.ownedFunctionPkg.eType = fa.FunctionPkg
fa.AbstractFunctionalArchitecture.ownedComponentExchanges.eType = fa.ComponentExchange
fa.AbstractFunctionalArchitecture.ownedComponentExchangeCategories.eType = fa.ComponentExchangeCategory
fa.AbstractFunctionalArchitecture.ownedFunctionalLinks.eType = fa.ExchangeLink
fa.AbstractFunctionalArchitecture.ownedFunctionalAllocations.eType = fa.ComponentFunctionalAllocation
fa.AbstractFunctionalArchitecture.ownedComponentExchangeRealizations.eType = fa.ComponentExchangeRealization
fa.AbstractFunctionalBlock.ownedFunctionalAllocation.eType = fa.ComponentFunctionalAllocation
fa.AbstractFunctionalBlock.ownedComponentExchanges.eType = fa.ComponentExchange
fa.AbstractFunctionalBlock.ownedComponentExchangeCategories.eType = fa.ComponentExchangeCategory
fa.AbstractFunctionalBlock.inExchangeLinks.eType = fa.ExchangeLink
fa.AbstractFunctionalBlock.outExchangeLinks.eType = fa.ExchangeLink
fa.FunctionPkg.ownedFunctionalLinks.eType = fa.ExchangeLink
fa.FunctionPkg.ownedExchanges.eType = fa.FunctionalExchangeSpecification
fa.FunctionPkg.ownedExchangeSpecificationRealizations.eType = fa.ExchangeSpecificationRealization
fa.FunctionPkg.ownedCategories.eType = fa.ExchangeCategory
fa.FunctionPkg.ownedFunctionSpecifications.eType = fa.FunctionSpecification
fa.FunctionSpecification.inExchangeLinks.eType = fa.ExchangeLink
fa.FunctionSpecification.outExchangeLinks.eType = fa.ExchangeLink
fa.FunctionSpecification.ownedFunctionPorts.eType = fa.FunctionPort
fa.FunctionSpecification.subFunctionSpecifications.eType = fa.FunctionSpecification
fa.ExchangeCategory.exchanges.eType = fa.FunctionalExchange
fa.ExchangeLink.exchanges.eType = fa.ExchangeSpecification
fa.ExchangeLink.ownedExchangeContainments.eType = fa.ExchangeContainment
fa.ExchangeLink.sources.eType = fa.FunctionSpecification
fa.ExchangeLink.destinations.eType = fa.FunctionSpecification
fa.ExchangeSpecification._containingLink.eType = fa.ExchangeLink
fa.FunctionalExchangeSpecification.functionalExchanges.eType = fa.FunctionalExchange
fa.FunctionalChain.ownedFunctionalChainInvolvements.eType = fa.FunctionalChainInvolvement
fa.FunctionalChain.ownedFunctionalChainRealizations.eType = fa.FunctionalChainRealization
fa.FunctionalChain.involvedFunctionalChainInvolvements.eType = fa.FunctionalChainInvolvement
fa.FunctionalChain.involvedElements.eType = capellacore.InvolvedElement
fa.FunctionalChain.enactedFunctions.eType = fa.AbstractFunction
fa.FunctionalChain.enactedFunctionalBlocks.eType = fa.AbstractFunctionalBlock
fa.FunctionalChain.availableInStates.eType = capellacommon.State
fa.FunctionalChain.firstFunctionalChainInvolvements.eType = fa.FunctionalChainInvolvement
fa.FunctionalChain.involvingCapabilities.eType = ctx.Capability
fa.FunctionalChain.involvingCapabilityRealizations.eType = la.CapabilityRealization
fa.FunctionalChain.realizedFunctionalChains.eType = fa.FunctionalChain
fa.FunctionalChain.realizingFunctionalChains.eType = fa.FunctionalChain
fa.FunctionalChain.preCondition.eType = capellacore.Constraint
fa.FunctionalChain.postCondition.eType = capellacore.Constraint
fa.FunctionalChain.ownedSequenceNodes.eType = fa.ControlNode
fa.FunctionalChain.ownedSequenceLinks.eType = fa.SequenceLink
fa.AbstractFunctionalChainContainer.ownedFunctionalChains.eType = fa.FunctionalChain
fa.FunctionalChainInvolvement.nextFunctionalChainInvolvements.eType = fa.FunctionalChainInvolvement
fa.FunctionalChainInvolvement.previousFunctionalChainInvolvements.eType = fa.FunctionalChainInvolvement
fa.FunctionalChainInvolvement._involvedElement.eType = capellacore.InvolvedElement
fa.FunctionalChainReference._referencedFunctionalChain.eType = fa.FunctionalChain
fa.FunctionInputPort.incomingExchangeItems.eType = information.ExchangeItem
fa.FunctionInputPort.incomingFunctionalExchanges.eType = fa.FunctionalExchange
fa.FunctionOutputPort.outgoingExchangeItems.eType = information.ExchangeItem
fa.FunctionOutputPort.outgoingFunctionalExchanges.eType = fa.FunctionalExchange
fa.FunctionalExchange.exchangeSpecifications.eType = fa.FunctionalExchangeSpecification
fa.FunctionalExchange.exchangedItems.eType = information.ExchangeItem
fa.FunctionalExchange.categories.eType = fa.ExchangeCategory
fa.FunctionalExchange.ownedFunctionalExchangeRealizations.eType = fa.FunctionalExchangeRealization
fa.FunctionalExchange._sourceFunctionOutputPort.eType = fa.FunctionOutputPort
fa.FunctionalExchange._targetFunctionInputPort.eType = fa.FunctionInputPort
fa.AbstractFunction.ownedFunctions.eType = fa.AbstractFunction
fa.AbstractFunction.ownedFunctionRealizations.eType = fa.FunctionRealization
fa.AbstractFunction.ownedFunctionalExchanges.eType = fa.FunctionalExchange
fa.AbstractFunction.subFunctions.eType = fa.AbstractFunction
fa.AbstractFunction.availableInStates.eType = capellacommon.State
fa.AbstractFunction.involvingCapabilities.eType = ctx.Capability
fa.AbstractFunction.involvingCapabilityRealizations.eType = la.CapabilityRealization
fa.AbstractFunction._linkedStateMachine.eType = capellacommon.StateMachine
fa.AbstractFunction._linkedFunctionSpecification.eType = fa.FunctionSpecification
fa.FunctionPort.representedComponentPort.eType = fa.ComponentPort
fa.FunctionPort.realizedFunctionPorts.eType = fa.FunctionPort
fa.FunctionPort.realizingFunctionPorts.eType = fa.FunctionPort
fa.ComponentExchange.ownedComponentExchangeFunctionalExchangeAllocations.eType = fa.ComponentExchangeFunctionalExchangeAllocation
fa.ComponentExchange.ownedComponentExchangeRealizations.eType = fa.ComponentExchangeRealization
fa.ComponentExchange.ownedComponentExchangeEnds.eType = fa.ComponentExchangeEnd
fa.ComponentExchange._sourcePort.eType = information.Port
fa.ComponentExchange._sourcePart.eType = cs.Part
fa.ComponentExchange._targetPort.eType = information.Port
fa.ComponentExchange._targetPart.eType = cs.Part
fa.ComponentExchange.categories.eType = fa.ComponentExchangeCategory
fa.ComponentExchange.allocatorPhysicalLinks.eType = cs.PhysicalLink
fa.ComponentExchangeAllocation._componentExchangeAllocated.eType = fa.ComponentExchange
fa.ComponentExchangeAllocation._componentExchangeAllocator.eType = fa.ComponentExchangeAllocator
fa.ComponentExchangeAllocator.ownedComponentExchangeAllocations.eType = fa.ComponentExchangeAllocation
fa.ComponentExchangeAllocator.allocatedComponentExchanges.eType = fa.ComponentExchange
fa.ComponentExchangeCategory.exchanges.eType = fa.ComponentExchange
fa.ComponentExchangeEnd.port.eType = information.Port
fa.ComponentExchangeEnd.part.eType = cs.Part
fa.ComponentPort.componentExchanges.eType = fa.ComponentExchange
fa.ComponentPortAllocation.ownedComponentPortAllocationEnds.eType = fa.ComponentPortAllocationEnd
fa.ComponentPortAllocation._allocatedPort.eType = information.Port
fa.ComponentPortAllocation._allocatingPort.eType = information.Port
fa.ComponentPortAllocationEnd.port.eType = information.Port
fa.ComponentPortAllocationEnd.part.eType = cs.Part
fa.ComponentPortAllocationEnd._owningComponentPortAllocation.eType = fa.ComponentPortAllocation
fa.FunctionalChainInvolvementLink.exchangeContext.eType = capellacore.Constraint
fa.FunctionalChainInvolvementLink.exchangedItems.eType = information.ExchangeItem
fa.FunctionalChainInvolvementLink.source.eType = fa.FunctionalChainInvolvementFunction
fa.FunctionalChainInvolvementLink.target.eType = fa.FunctionalChainInvolvementFunction
fa.SequenceLink.condition.eType = capellacore.Constraint
fa.SequenceLink.links.eType = fa.FunctionalChainInvolvementLink
fa.SequenceLink.source.eType = fa.SequenceLinkEnd
fa.SequenceLink.target.eType = fa.SequenceLinkEnd
fa.FunctionalChainInvolvementFunction.outgoingInvolvementLinks.eType = fa.FunctionalChainInvolvementLink
fa.FunctionalChainInvolvementFunction.incomingInvolvementLinks.eType = fa.FunctionalChainInvolvementLink
fa.ReferenceHierarchyContext.sourceReferenceHierarchy.eType = fa.FunctionalChainReference
fa.ReferenceHierarchyContext.targetReferenceHierarchy.eType = fa.FunctionalChainReference
fa.AbstractFunctionalBlock.functionalAllocations.eType = fa.ComponentFunctionalAllocation
fa.AbstractFunctionalBlock.allocatedFunctions.eType = fa.AbstractFunction
fa.ExchangeLink.exchangeContainmentLinks.eType = fa.ExchangeContainment
fa.ExchangeContainment.exchange.eType = fa.ExchangeSpecification
fa.ExchangeContainment.link.eType = fa.ExchangeLink
fa.ExchangeContainment.link.eOpposite = fa.ExchangeLink.exchangeContainmentLinks
fa.ExchangeSpecification.link.eType = fa.ExchangeContainment
fa.ExchangeSpecification.link.eOpposite = fa.ExchangeContainment.exchange
fa.ExchangeSpecification.outgoingExchangeSpecificationRealizations.eType = fa.ExchangeSpecificationRealization
fa.ExchangeSpecification.incomingExchangeSpecificationRealizations.eType = fa.ExchangeSpecificationRealization
fa.FunctionalChain.involvedFunctions.eType = fa.AbstractFunction
fa.FunctionalChain.involvedFunctionalExchanges.eType = fa.FunctionalExchange
fa.ComponentFunctionalAllocation._function.eType = fa.AbstractFunction
fa.ComponentFunctionalAllocation._block.eType = fa.AbstractFunctionalBlock
fa.ComponentFunctionalAllocation._block.eOpposite = fa.AbstractFunctionalBlock.functionalAllocations
fa.ExchangeSpecificationRealization._realizedExchangeSpecification.eType = fa.ExchangeSpecification
fa.ExchangeSpecificationRealization._realizedExchangeSpecification.eOpposite = fa.ExchangeSpecification.incomingExchangeSpecificationRealizations
fa.ExchangeSpecificationRealization._realizingExchangeSpecification.eType = fa.ExchangeSpecification
fa.ExchangeSpecificationRealization._realizingExchangeSpecification.eOpposite = fa.ExchangeSpecification.outgoingExchangeSpecificationRealizations
fa.FunctionalExchangeRealization._realizedFunctionalExchange.eType = fa.FunctionalExchange
fa.FunctionalExchangeRealization._realizingFunctionalExchange.eType = fa.FunctionalExchange
fa.FunctionRealization._allocatedFunction.eType = fa.AbstractFunction
fa.FunctionRealization._allocatingFunction.eType = fa.AbstractFunction
fa.FunctionalExchange.involvingFunctionalChains.eType = fa.FunctionalChain
fa.FunctionalExchange.involvingFunctionalChains.eOpposite = fa.FunctionalChain.involvedFunctionalExchanges
fa.FunctionalExchange.allocatingComponentExchanges.eType = fa.ComponentExchange
fa.FunctionalExchange.incomingComponentExchangeFunctionalExchangeRealizations.eType = fa.ComponentExchangeFunctionalExchangeAllocation
fa.FunctionalExchange.incomingFunctionalExchangeRealizations.eType = fa.FunctionalExchangeRealization
fa.FunctionalExchange.incomingFunctionalExchangeRealizations.eOpposite = fa.FunctionalExchangeRealization._realizedFunctionalExchange
fa.FunctionalExchange.outgoingFunctionalExchangeRealizations.eType = fa.FunctionalExchangeRealization
fa.FunctionalExchange.outgoingFunctionalExchangeRealizations.eOpposite = fa.FunctionalExchangeRealization._realizingFunctionalExchange
fa.FunctionalExchange.realizedFunctionalExchanges.eType = fa.FunctionalExchange
fa.FunctionalExchange.realizingFunctionalExchanges.eType = fa.FunctionalExchange
fa.FunctionalExchange.realizingFunctionalExchanges.eOpposite = fa.FunctionalExchange.realizedFunctionalExchanges
fa.AbstractFunction.outFunctionRealizations.eType = fa.FunctionRealization
fa.AbstractFunction.outFunctionRealizations.eOpposite = fa.FunctionRealization._allocatingFunction
fa.AbstractFunction.inFunctionRealizations.eType = fa.FunctionRealization
fa.AbstractFunction.inFunctionRealizations.eOpposite = fa.FunctionRealization._allocatedFunction
fa.AbstractFunction.componentFunctionalAllocations.eType = fa.ComponentFunctionalAllocation
fa.AbstractFunction.componentFunctionalAllocations.eOpposite = fa.ComponentFunctionalAllocation._function
fa.AbstractFunction.allocationBlocks.eType = fa.AbstractFunctionalBlock
fa.AbstractFunction.allocationBlocks.eOpposite = fa.AbstractFunctionalBlock.allocatedFunctions
fa.AbstractFunction.involvingFunctionalChains.eType = fa.FunctionalChain
fa.AbstractFunction.involvingFunctionalChains.eOpposite = fa.FunctionalChain.involvedFunctions
fa.FunctionPort.allocatorComponentPorts.eType = fa.ComponentPort
fa.ComponentExchange.allocatedFunctionalExchanges.eType = fa.FunctionalExchange
fa.ComponentExchange.allocatedFunctionalExchanges.eOpposite = fa.FunctionalExchange.allocatingComponentExchanges
fa.ComponentExchange.incomingComponentExchangeRealizations.eType = fa.ComponentExchangeRealization
fa.ComponentExchange.outgoingComponentExchangeRealizations.eType = fa.ComponentExchangeRealization
fa.ComponentExchange.outgoingComponentExchangeFunctionalExchangeAllocations.eType = fa.ComponentExchangeFunctionalExchangeAllocation
fa.ComponentExchange.realizedComponentExchanges.eType = fa.ComponentExchange
fa.ComponentExchange.realizingComponentExchanges.eType = fa.ComponentExchange
fa.ComponentExchange.realizingComponentExchanges.eOpposite = fa.ComponentExchange.realizedComponentExchanges
fa.ComponentExchangeFunctionalExchangeAllocation._allocatedFunctionalExchange.eType = fa.FunctionalExchange
fa.ComponentExchangeFunctionalExchangeAllocation._allocatedFunctionalExchange.eOpposite = fa.FunctionalExchange.incomingComponentExchangeFunctionalExchangeRealizations
fa.ComponentExchangeFunctionalExchangeAllocation._allocatingComponentExchange.eType = fa.ComponentExchange
fa.ComponentExchangeFunctionalExchangeAllocation._allocatingComponentExchange.eOpposite = fa.ComponentExchange.outgoingComponentExchangeFunctionalExchangeAllocations
fa.ComponentExchangeRealization._allocatedComponentExchange.eType = fa.ComponentExchange
fa.ComponentExchangeRealization._allocatedComponentExchange.eOpposite = fa.ComponentExchange.incomingComponentExchangeRealizations
fa.ComponentExchangeRealization._allocatingComponentExchange.eType = fa.ComponentExchange
fa.ComponentExchangeRealization._allocatingComponentExchange.eOpposite = fa.ComponentExchange.outgoingComponentExchangeRealizations
fa.ComponentPort.allocatedFunctionPorts.eType = fa.FunctionPort
fa.ComponentPort.allocatedFunctionPorts.eOpposite = fa.FunctionPort.allocatorComponentPorts
fa.ComponentPort.delegatedComponentPorts.eType = fa.ComponentPort
fa.ComponentPort.delegatingComponentPorts.eType = fa.ComponentPort
fa.ComponentPort.delegatingComponentPorts.eOpposite = fa.ComponentPort.delegatedComponentPorts
fa.ComponentPort.allocatingPhysicalPorts.eType = cs.PhysicalPort
fa.ComponentPort.realizedComponentPorts.eType = fa.ComponentPort
fa.ComponentPort.realizingComponentPorts.eType = fa.ComponentPort
fa.ComponentPort.realizingComponentPorts.eOpposite = fa.ComponentPort.realizedComponentPorts

#print('fa.cross_init done')
